From edc34401f70d2afa8841ce340a4ae95492248b78 Mon Sep 17 00:00:00 2001
From: Bharat Bhushan <Bharat.Bhushan@nxp.com>
Date: Mon, 14 Mar 2016 18:17:51 +0530
Subject: [PATCH 16/18] vfio fsl-mc: Scan and populate child devices of
 mc-container

Currently all mc-devices in the container needs to be provided
in qemu command line, but this patch improves this and now only
the root container of virtual machine needed to be provided.
Then all child devices in the container are scanned and populated
in guest address space.

$ ./qemu-system-aarch64 <other QEMU args> -device vfio-fsl-mc,host=dprc.x

Signed-off-by: Bharat Bhushan <Bharat.Bhushan@nxp.com>
Signed-off-by: Pankaj Chauhan <Pankaj.Chauhan@nxp.com>
---
 hw/fsl-mc/fsl-mc.h |  5 +++-
 hw/vfio/fsl_mc.c   | 80 ++++++++++++++++++++++++++++++++++++++++++++++++++++--
 2 files changed, 82 insertions(+), 3 deletions(-)

diff --git a/hw/fsl-mc/fsl-mc.h b/hw/fsl-mc/fsl-mc.h
index 8b8cc94..9f026a3 100644
--- a/hw/fsl-mc/fsl-mc.h
+++ b/hw/fsl-mc/fsl-mc.h
@@ -29,6 +29,10 @@
 /* Size of each QBMAN Portal */
 #define FSLMC_QBMAN_PORTAL_SIZE 0x10000
 
+#define FSLMC_HOST_SYSFS_PATH	"/sys/bus/fsl-mc/devices/"
+#define FSLMC_DEV_SYSPATH_LEN	100
+#define FSLMC_DEV_NAME_LEN		20
+
 struct FslMcBusState;
 
 #define TYPE_FSL_MC_BUS "fsl-mc-bus"
@@ -110,5 +114,4 @@ int fsl_mc_connect_irq(FslMcDeviceState *mcdev, int irq_num,
                        char *name, uint16_t id);
 int fsl_mc_bus_get_irq_num(int irq_index);
 int fsl_mc_assert_irq(FslMcDeviceState *mcdev, int irq_num);
-
 #endif /* !defined(FSL_MC_FSL_MC_H) */
diff --git a/hw/vfio/fsl_mc.c b/hw/vfio/fsl_mc.c
index e23c8d5..ffc6e52 100644
--- a/hw/vfio/fsl_mc.c
+++ b/hw/vfio/fsl_mc.c
@@ -14,7 +14,9 @@
 
 #include <linux/vfio.h>
 #include <sys/ioctl.h>
-
+#include <sys/types.h>
+#include <dirent.h>
+#include <strings.h>
 #include "hw/fsl-mc/fsl-mc.h"
 #include "hw/vfio/vfio-fsl-mc.h"
 #include "qemu/error-report.h"
@@ -352,6 +354,80 @@ static int vfio_set_kvm_irqfd(VFIOFslmcDevice *vdev, VFIO_LINE_IRQ *line_irq, in
     return 0;
 }
 
+static bool vfio_fslmc_is_mcdev(const char* mcdev_name)
+{
+    const char *mcdev_type;
+    int type_array_size, i, len;
+    const char *fsl_mcdev_types[] = {
+       "dprc",
+       "dpbp",
+       "dpmcp",
+       "dpcon",
+       "dpio",
+       "dpni",
+    };
+
+    type_array_size = sizeof(fsl_mcdev_types) / sizeof(fsl_mcdev_types[0]);
+
+    for(i=0; i < type_array_size; i++) {
+        mcdev_type = fsl_mcdev_types[i];
+        len = strnlen(mcdev_type, FSLMC_DEV_NAME_LEN);
+        if (!memcmp(mcdev_type, mcdev_name, len)) {
+            return true;
+        }
+    }
+
+    return false;
+}
+
+static void vfio_fsl_mc_create_qdev(FslMcDeviceState *parent_mcdev,
+                                    const char *mcdev_name)
+{
+    DeviceState *vfio_mcdev;
+    BusState *parent_bus = &parent_mcdev->bus->qbus;
+
+    vfio_mcdev = qdev_create(parent_bus, "vfio-fsl-mc");
+    vfio_mcdev->id = TYPE_VFIO_FSL_MC;
+    qdev_prop_set_string(vfio_mcdev, "host", mcdev_name);
+    qdev_init_nofail(vfio_mcdev);
+}
+
+static void vfio_fsl_mc_scan_dprc(FslMcDeviceState *mcdev)
+{
+    VFIOFslmcDevice *vdev = DO_UPCAST(VFIOFslmcDevice, mcdev, mcdev);
+    VFIODevice *vbasedev = &vdev->vbasedev;
+    char dev_syspath[FSLMC_DEV_SYSPATH_LEN];
+    DIR *dir;
+    struct dirent *entry;
+    int len;
+
+    if (strncmp(vdev->name, "dprc", 10)) {
+        goto out;
+    }
+
+    memset(&dev_syspath[0], 0, FSLMC_DEV_SYSPATH_LEN);
+    strncpy(dev_syspath, FSLMC_HOST_SYSFS_PATH, FSLMC_DEV_SYSPATH_LEN);
+    len = strlen(dev_syspath);
+    strncat(dev_syspath, vbasedev->name, (FSLMC_DEV_SYSPATH_LEN - len));
+    dir = opendir(dev_syspath);
+    if (!dir) {
+        error_report("vfio-fslmc: Failed to open directory: %s\n", dev_syspath);
+        goto out;
+    }
+
+    while ((entry = readdir(dir))) {
+        if (!vfio_fslmc_is_mcdev(entry->d_name)) {
+            continue;
+        }
+
+        vfio_fsl_mc_create_qdev(mcdev, entry->d_name);
+    }
+
+    closedir(dir);
+out:
+    return;
+}
+
 static int vfio_fsl_mc_initfn(FslMcDeviceState *mcdev)
 {
     VFIOFslmcDevice *vdev = DO_UPCAST(VFIOFslmcDevice, mcdev, mcdev);
@@ -407,6 +483,7 @@ static int vfio_fsl_mc_initfn(FslMcDeviceState *mcdev)
         }
     }
 
+    vfio_fsl_mc_scan_dprc(mcdev);
     return 0;
 }
 
@@ -414,7 +491,6 @@ static void vfio_fsl_mc_instance_init(Object *obj)
 {
     FslMcDeviceState *mcdev = FSL_MC_DEVICE(obj);
     VFIOFslmcDevice *vdev = DO_UPCAST(VFIOFslmcDevice, mcdev, mcdev);
-
     device_add_bootindex_property(obj, &vdev->bootindex,
                                   "bootindex", NULL,
                                   &mcdev->qdev, NULL);
-- 
1.8.3.2

