From 4681d945f2f7cf436a51426d00c3f9032fda8bf2 Mon Sep 17 00:00:00 2001
From: Bharat Bhushan <Bharat.Bhushan@freescale.com>
Date: Thu, 26 Nov 2015 15:36:55 +0530
Subject: [PATCH 01/18] vfio fsl-mc: Initial Patch to add support vfio fsl-mc

With this patch only polling mode was tested in guest and interrupt mode
not yet supported.

Signed-off-by: Bharat Bhushan <Bharat.Bhushan@freescale.com>
---
 hw/Makefile.objs              |   1 +
 hw/arm/Makefile.objs          |   2 +-
 hw/arm/fslmcbus-fdt.c         | 120 ++++++++++++++++
 hw/arm/virt.c                 |  37 +++++
 hw/fsl-mc/Makefile.objs       |   1 +
 hw/fsl-mc/fsl-mc.c            | 309 ++++++++++++++++++++++++++++++++++++++++++
 hw/fsl-mc/fsl-mc.h            | 101 ++++++++++++++
 hw/vfio/Makefile.objs         |   1 +
 hw/vfio/fsl_mc.c              | 307 +++++++++++++++++++++++++++++++++++++++++
 include/hw/arm/fslmc-fdt.h    |  57 ++++++++
 include/hw/arm/virt.h         |   1 +
 include/hw/vfio/vfio-common.h |   1 +
 include/hw/vfio/vfio-fsl-mc.h |  45 ++++++
 13 files changed, 982 insertions(+), 1 deletion(-)
 create mode 100644 hw/arm/fslmcbus-fdt.c
 create mode 100644 hw/fsl-mc/Makefile.objs
 create mode 100644 hw/fsl-mc/fsl-mc.c
 create mode 100644 hw/fsl-mc/fsl-mc.h
 create mode 100644 hw/vfio/fsl_mc.c
 create mode 100644 include/hw/arm/fslmc-fdt.h
 create mode 100644 include/hw/vfio/vfio-fsl-mc.h

diff --git a/hw/Makefile.objs b/hw/Makefile.objs
index 73afa41..db603ea 100644
--- a/hw/Makefile.objs
+++ b/hw/Makefile.objs
@@ -7,6 +7,7 @@ devices-dirs-$(CONFIG_SOFTMMU) += char/
 devices-dirs-$(CONFIG_SOFTMMU) += cpu/
 devices-dirs-$(CONFIG_SOFTMMU) += display/
 devices-dirs-$(CONFIG_SOFTMMU) += dma/
+devices-dirs-$(CONFIG_SOFTMMU) += fsl-mc/
 devices-dirs-$(CONFIG_SOFTMMU) += gpio/
 devices-dirs-$(CONFIG_SOFTMMU) += i2c/
 devices-dirs-$(CONFIG_SOFTMMU) += ide/
diff --git a/hw/arm/Makefile.objs b/hw/arm/Makefile.objs
index cf346c1..e7428d8 100644
--- a/hw/arm/Makefile.objs
+++ b/hw/arm/Makefile.objs
@@ -5,7 +5,7 @@ obj-y += omap_sx1.o palm.o realview.o spitz.o stellaris.o
 obj-y += tosa.o versatilepb.o vexpress.o virt.o xilinx_zynq.o z2.o
 obj-$(CONFIG_ACPI) += virt-acpi-build.o
 obj-y += netduino2.o
-obj-y += sysbus-fdt.o
+obj-y += sysbus-fdt.o fslmcbus-fdt.o
 
 obj-y += armv7m.o exynos4210.o pxa2xx.o pxa2xx_gpio.o pxa2xx_pic.o
 obj-$(CONFIG_DIGIC) += digic.o
diff --git a/hw/arm/fslmcbus-fdt.c b/hw/arm/fslmcbus-fdt.c
new file mode 100644
index 0000000..87f57ba
--- /dev/null
+++ b/hw/arm/fslmcbus-fdt.c
@@ -0,0 +1,120 @@
+/*
+ * Freescale Management Complex (MC) Bus device tree generation helpers
+ *
+ * Copyright (C) 2015 Freescale Semiconductor, Inc. All rights reserved.
+ *
+ * Authors:
+ *  Bharat Bhushan <bharat.bhushan@freescale.com>
+ *
+ * This file is derived from hw/arm/sysbus-fdt.c
+ *
+ * This program is free software; you can redistribute it and/or modify it
+ * under the terms and conditions of the GNU General Public License,
+ * version 2 or later, as published by the Free Software Foundation.
+ *
+ * This program is distributed in the hope it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
+ * more details.
+ *
+ * You should have received a copy of the GNU General Public License along with
+ * this program.  If not, see <http://www.gnu.org/licenses/>.
+ *
+ */
+
+#include "hw/arm/sysbus-fdt.h"
+#include "qemu/error-report.h"
+#include "sysemu/device_tree.h"
+#include "sysemu/sysemu.h"
+#include "hw/fsl-mc/fsl-mc.h"
+#include "hw/vfio/vfio-fsl-mc.h"
+#include "hw/arm/fslmc-fdt.h"
+
+/*
+ * internal struct that contains the information to create dynamic
+ * sysbus device node
+ */
+typedef struct FslmcBusFDTData {
+    void *fdt; /* device tree handle */
+} FslmcBusFDTData;
+
+/*
+ * struct used when calling the machine init done notifier
+ * that constructs the fdt nodes of mc bus devices
+ */
+typedef struct FSLMCBusFDTNotifierParams {
+    Notifier notifier;
+    FSLMCBusFDTParams *fdt_params;
+} FSLMCBusFDTNotifierParams;
+
+/* Device Specific Code */
+
+/**
+ * add_fsl_mc_bus_fdt_node - create all fsl mc bus node
+ *
+ * builds the root fsl mc bus node and map regions of other devices
+ */
+static void add_fsl_mc_bus_fdt_node(FSLMCBusFDTParams *fdt_params)
+{
+    const char compat[] = "fsl,qoriq-mc";
+    gchar *node;
+    hwaddr mc_p_addr, mc_p_size, qbman_p_addr, qbman_p_size;
+    hwaddr mcaddr, mcsize;
+    int dtb_size;
+    struct arm_boot_info *info = fdt_params->binfo;
+    const FSLMCBusSystemParams *params = fdt_params->system_params;
+    void *fdt = info->get_dtb(info, &dtb_size);
+
+    /*
+     * If the user provided a dtb, we assume the dynamic sysbus nodes
+     * already are integrated there. This corresponds to a use case where
+     * the dynamic sysbus nodes are complex and their generation is not yet
+     * supported. In that case the user can take charge of the guest dt
+     * while qemu takes charge of the qom stuff.
+     */
+    if (info->dtb_filename) {
+        return;
+    }
+
+    fsl_mc_get_portals_ranges(&mc_p_addr, &mc_p_size, &qbman_p_addr, &qbman_p_size);
+    fsl_mc_get_root_mcp_addr_range(&mcaddr, &mcsize);
+
+    assert(fdt);
+
+    node = g_strdup_printf("/fsl-mc@%"PRIx64, params->fslmc_bus_base);
+
+    /* Create a /fsl-mc node that we can put all devices into */
+    qemu_fdt_add_subnode(fdt, node);
+    qemu_fdt_setprop(fdt, node, "compatible", compat, sizeof(compat));
+    qemu_fdt_setprop_cells(fdt, node, "#size-cells", 1);
+    qemu_fdt_setprop_cells(fdt, node, "#address-cells", 3);
+    qemu_fdt_setprop_cells(fdt, node, "ranges", 0x0, 0x0, 0x0,
+                                                     mc_p_addr >> 32,
+                                                     mc_p_addr, mc_p_size,
+                                                0x1, 0x0, 0x0,
+                                                     qbman_p_addr >> 32,
+                                                     qbman_p_addr,
+                                                     qbman_p_size);
+    qemu_fdt_setprop_cells(fdt, node, "reg", mcaddr >> 32, mcaddr,
+                                             mcsize >> 32, mcsize);
+    g_free(node);
+}
+
+static void fsl_mc_bus_fdt_notify(Notifier *notifier, void *data)
+{
+    FSLMCBusFDTNotifierParams *p = DO_UPCAST(FSLMCBusFDTNotifierParams,
+                                                notifier, notifier);
+
+    add_fsl_mc_bus_fdt_node(p->fdt_params);
+    g_free(p->fdt_params);
+    g_free(p);
+}
+
+void fsl_register_mc_bus_fdt_creator(FSLMCBusFDTParams *fdt_params)
+{
+    FSLMCBusFDTNotifierParams *p = g_new(FSLMCBusFDTNotifierParams, 1);
+
+    p->fdt_params = fdt_params;
+    p->notifier.notify = fsl_mc_bus_fdt_notify;
+    qemu_add_machine_init_done_notifier(&p->notifier);
+}
diff --git a/hw/arm/virt.c b/hw/arm/virt.c
index 4846892..91f8d07 100644
--- a/hw/arm/virt.c
+++ b/hw/arm/virt.c
@@ -48,6 +48,8 @@
 #include "hw/arm/sysbus-fdt.h"
 #include "hw/platform-bus.h"
 #include "hw/arm/fdt.h"
+#include "hw/fsl-mc/fsl-mc.h"
+#include "hw/arm/fslmc-fdt.h"
 
 /* Number of external interrupt lines to configure the GIC with */
 #define NUM_IRQS 256
@@ -55,6 +57,7 @@
 #define PLATFORM_BUS_NUM_IRQS 64
 
 static ARMPlatformBusSystemParams platform_bus_params;
+static FSLMCBusSystemParams fsl_mc_bus_params;
 
 typedef struct VirtBoardInfo {
     struct arm_boot_info bootinfo;
@@ -117,6 +120,7 @@ static const MemMapEntry a15memmap[] = {
     [VIRT_PCIE_PIO] =           { 0x3eff0000, 0x00010000 },
     [VIRT_PCIE_ECAM] =          { 0x3f000000, 0x01000000 },
     [VIRT_MEM] =                { 0x40000000, 30ULL * 1024 * 1024 * 1024 },
+    [VIRT_FSL_MC_BUS] =     	{ 0x800000000, 0x20000000 },
 };
 
 static const int a15irqmap[] = {
@@ -772,6 +776,36 @@ static void create_platform_bus(VirtBoardInfo *vbi, qemu_irq *pic)
                                 sysbus_mmio_get_region(s, 0));
 }
 
+static void create_fsl_mc(const VirtBoardInfo *vbi, qemu_irq *pic)
+{
+    hwaddr base = vbi->memmap[VIRT_FSL_MC_BUS].base;
+    DeviceState *mcdev;
+    SysBusDevice *mcsdev;
+    FSLMCBusFDTParams *fdt_params = g_new(FSLMCBusFDTParams, 1);
+
+    mcdev = qdev_create(NULL, "fsl-mc-host");
+    mcdev->id = TYPE_FSL_MC_HOST;
+    qdev_prop_set_uint64(mcdev, "mc_bus_base_addr", base);
+    qdev_prop_set_uint64(mcdev, "mc_portals_range_offset", 0x0);
+    qdev_prop_set_uint64(mcdev, "mc_portals_range_size",
+                         FSLMC_MC_PORTALS_RANGE_SIZE);
+    qdev_prop_set_uint64(mcdev, "qbman_portals_range_offset",
+                         FSLMC_MC_PORTALS_RANGE_SIZE);
+    qdev_prop_set_uint64(mcdev, "qbman_portals_range_size",
+                         FSLMC_QBMAN_PORTALS_RANGE_SIZE);
+    qdev_init_nofail(mcdev);
+    mcsdev = SYS_BUS_DEVICE(mcdev);
+    sysbus_mmio_map(mcsdev, 0, base);
+    sysbus_mmio_map(mcsdev, 1, base + FSLMC_MC_PORTALS_RANGE_SIZE);
+
+    fsl_mc_bus_params.fslmc_bus_base = base;
+    fsl_mc_bus_params.fslmc_bus_size = FSLMC_MC_PORTALS_RANGE_SIZE;
+    fdt_params->system_params = &fsl_mc_bus_params;
+    fdt_params->binfo = &vbi->bootinfo;
+    fdt_params->intc = "/intc";
+    fsl_register_mc_bus_fdt_creator(fdt_params);
+}
+
 static void *machvirt_dtb(const struct arm_boot_info *binfo, int *fdt_size)
 {
     const VirtBoardInfo *board = (const VirtBoardInfo *)binfo;
@@ -910,6 +944,9 @@ static void machvirt_init(MachineState *machine)
     vbi->bootinfo.firmware_loaded = bios_name || drive_get(IF_PFLASH, 0, 0);
     arm_load_kernel(ARM_CPU(first_cpu), &vbi->bootinfo);
 
+    /* Create FSL-MC Bus device */
+    create_fsl_mc(vbi, pic);
+
     /*
      * arm_load_kernel machine init done notifier registration must
      * happen before the platform_bus_create call. In this latter,
diff --git a/hw/fsl-mc/Makefile.objs b/hw/fsl-mc/Makefile.objs
new file mode 100644
index 0000000..679bf23
--- /dev/null
+++ b/hw/fsl-mc/Makefile.objs
@@ -0,0 +1 @@
+common-obj-y += fsl-mc.o
diff --git a/hw/fsl-mc/fsl-mc.c b/hw/fsl-mc/fsl-mc.c
new file mode 100644
index 0000000..9882e31
--- /dev/null
+++ b/hw/fsl-mc/fsl-mc.c
@@ -0,0 +1,309 @@
+/*
+ * FSL Management Complex driver
+ *
+ * Copyright (C) 2015 Freescale Semiconductor, Inc. All rights reserved.
+ *
+ * Author: Bharat Bhushan, <bharat.bhushan@freescale.com>
+ *
+ * This is free software; you can redistribute it and/or modify
+ * it under the terms of  the GNU General  Public License as published by
+ * the Free Software Foundation;  either version 2 of the  License, or
+ * (at your option) any later version.
+ *
+ * *****************************************************************
+ *
+ */
+
+#include "fsl-mc.h"
+
+static Property fsl_mc_props[] = {
+    DEFINE_PROP_UINT64("mc_bus_base_addr", FslMcHostState, mc_bus_base_addr, 0),
+    DEFINE_PROP_UINT64("mc_portals_range_offset", FslMcHostState,
+                       mc_portals_range_offset, 0),
+    DEFINE_PROP_UINT64("mc_portals_range_size", FslMcHostState,
+                       mc_portals_range_size, 0),
+    DEFINE_PROP_UINT64("qbman_portals_range_offset", FslMcHostState,
+                       qbman_portals_range_offset, 0),
+    DEFINE_PROP_UINT64("qbman_portals_range_size", FslMcHostState,
+                       qbman_portals_range_size, 0),
+    DEFINE_PROP_END_OF_LIST(),
+};
+
+int fsl_mc_get_portals_ranges(hwaddr *mc_p_addr, hwaddr *mc_p_size,
+                              hwaddr *qbman_p_addr, hwaddr *qbman_p_size)
+{
+    DeviceState *dev;
+    FslMcHostState *host;
+
+    dev = qdev_find_recursive(sysbus_get_default(), TYPE_FSL_MC_HOST);
+    host = FSL_MC_HOST(dev);
+
+    *mc_p_addr = host->mc_bus_base_addr +  host->mc_portals_range_offset;
+    *mc_p_size = host->mc_portals_range_size;
+    *qbman_p_addr = host->mc_bus_base_addr + host->qbman_portals_range_offset;
+    *qbman_p_size = host->qbman_portals_range_size;
+    return 0;
+}
+
+static FslMcDeviceState *find_root_dprc_device(FslMcBusState *bus)
+{
+    FslMcDeviceState *mcdev = NULL;
+
+    QLIST_FOREACH(mcdev, &bus->device_list, next) {
+        if(mcdev->root_dprc == true) {
+            return mcdev;
+        }
+    }
+    return NULL;
+}
+
+int fsl_mc_get_root_mcp_addr_range(hwaddr *mc_p_addr, hwaddr *mc_p_size)
+{
+    DeviceState *dev;
+    FslMcHostState *host;
+    FslMcDeviceState *mcdev = NULL;
+    hwaddr addr;
+
+    dev = qdev_find_recursive(sysbus_get_default(), TYPE_FSL_MC_HOST);
+    host = FSL_MC_HOST(dev);
+
+    mcdev = find_root_dprc_device(&host->bus);
+    if (mcdev == NULL) {
+	return -1;
+    }
+
+    addr = host->mc_bus_base_addr +  host->mc_portals_range_offset;
+    addr += FSLMC_MC_PORTAL_SIZE * (mcdev->dprc_id - 1);
+    *mc_p_addr = addr;
+    *mc_p_size = 0x40;
+    return 0;
+}
+
+int fsl_mc_register_device(FslMcDeviceState *mcdev, int region_num,
+                           MemoryRegion *mem, MemoryRegion *mmap_mem,
+                           char *name, uint16_t id)
+{
+    FslMcBusState *bus;
+    FslMcHostState *host;
+    hwaddr offset;
+    MemoryRegion *portal = NULL;
+    static bool root_dprc_probed = false;
+    FslMcDeviceState *tmp;
+    bool found = false;
+
+    bus = mcdev->bus;
+    if (bus == NULL) {
+        fprintf(stderr, "No FSL-MC Bus found\n");
+        return -ENODEV;
+    }
+
+    host = FSL_MC_HOST(bus->qbus.parent);
+    if (host == NULL) {
+        fprintf(stderr, "No FSL-MC Host bridge found\n");
+        return -ENODEV;
+    }
+
+    if (strncmp(name, "dprc", 10) == 0) {
+        if (root_dprc_probed == false) {
+            mcdev->root_dprc = true;
+            root_dprc_probed = true;
+            mcdev->dprc_id = id;
+        } else {
+            fprintf(stderr, "Only One Root DPRC can exists\n");
+        }
+    }
+
+    if (strncmp(name, "dprc", 10) == 0) {
+        portal = &host->mc_portal;
+        offset = FSLMC_MC_PORTAL_SIZE * (id - 1);
+	if (offset > host->mc_portals_range_size) {
+            return -EINVAL;
+        }
+    } else if (strncmp(name, "dpmcp", 10) == 0) {
+        portal = &host->mc_portal;
+        offset = FSLMC_MC_PORTAL_SIZE * id;
+	if (offset > host->mc_portals_range_size) {
+            return -EINVAL;
+        }
+    } else if (strncmp(name, "dpio", 10) == 0) {
+        portal = &host->qbman_portal;
+        if (region_num) {
+            offset = host->qbman_portals_ce_offset;
+        } else {
+            offset = host->qbman_portals_ci_offset;
+        }
+
+        offset += FSLMC_QBMAN_PORTAL_SIZE * (id - 1);
+	if (offset > host->qbman_portals_range_size) {
+            return -EINVAL;
+        }
+    } else {
+        fprintf(stderr, "%s: Error No Matching device(%s) found \n",
+                __func__, name);
+        return -EINVAL;
+    }
+
+    memory_region_add_subregion(portal, offset, mem);
+    memory_region_set_enabled(mmap_mem, true);
+
+    QLIST_FOREACH(tmp, &bus->device_list, next) {
+        if (tmp == mcdev) {
+            found = true;
+            break;
+         }
+    }
+    if (found == false) {
+        QLIST_INSERT_HEAD(&bus->device_list, mcdev, next);
+    }
+
+    return 0;
+}
+
+static int fsl_mc_qdev_init(DeviceState *qdev)
+{
+    FslMcDeviceState *mcdev = (FslMcDeviceState *)qdev;
+    FslMcDeviceClass *mc_dc = FSL_MC_DEVICE_GET_CLASS(mcdev);
+    int ret;
+
+    if (mc_dc->init) {
+        ret = mc_dc->init(mcdev);
+        if (ret != 0) {
+            return ret;
+        }
+    }
+    return 0;
+}
+
+static void fsl_mc_dev_realize(DeviceState *qdev, Error **errp)
+{
+    FslMcDeviceState *mcdev = (FslMcDeviceState *)qdev;
+    FslMcDeviceClass *mcdc = FSL_MC_DEVICE_GET_CLASS(mcdev);
+    FslMcBusState *bus;
+    Error *local_err = NULL;
+
+    bus = FSL_MC_BUS(qdev_get_parent_bus(qdev));
+    mcdev->bus = bus;
+
+    if (mcdc->realize) {
+        mcdc->realize(mcdev, &local_err);
+        if (local_err) {
+            return;
+        }
+    }
+}
+
+static void fsl_mc_default_realize(FslMcDeviceState *mcdev, Error **errp)
+{
+    FslMcDeviceClass *mcdc = FSL_MC_DEVICE_GET_CLASS(mcdev);
+
+    if (mcdc->init) {
+        if (mcdc->init(mcdev) < 0) {
+            error_setg(errp, "Device initialization failed");
+            return;
+        }
+    }
+}
+
+static void fsl_mc_device_class_init(ObjectClass *klass, void *data)
+{
+    DeviceClass *dc = DEVICE_CLASS(klass);
+    FslMcDeviceClass *mcdc = FSL_MC_DEVICE_CLASS(klass);
+
+    dc->bus_type = TYPE_FSL_MC_BUS;
+    dc->realize = fsl_mc_dev_realize;
+    dc->init = fsl_mc_qdev_init;
+//    dc->exit = fsl_mc_qdev_exit;
+    mcdc->realize = fsl_mc_default_realize;
+}
+
+static const TypeInfo fsl_mc_device_info = {
+    .name          = TYPE_FSL_MC_DEVICE,
+    .parent        = TYPE_DEVICE,
+    .instance_size = sizeof(FslMcDeviceState),
+    .class_size = sizeof(FslMcDeviceClass),
+    .class_init    = fsl_mc_device_class_init,
+};
+
+static uint64_t fsl_mc_portal_read(void *opaque, hwaddr addr,
+                                   unsigned size)
+{
+    fprintf(stderr, "%s: Addr = %lx, Size = %d\n", __func__, addr, size);
+    return 0;
+}
+static void fsl_mc_portal_write(void *opaque, hwaddr addr,
+                                uint64_t value, unsigned size)
+{
+    fprintf(stderr, "%s: Addr = %lx, Size = %d\n", __func__, addr, size);
+    fprintf(stderr, "%s \n", __func__);
+}
+
+static const MemoryRegionOps fsl_mc_portal_ops = {
+    .read = fsl_mc_portal_read,
+    .write = fsl_mc_portal_write,
+    .endianness = DEVICE_LITTLE_ENDIAN,
+    .valid = {
+        .min_access_size = 4,
+        .max_access_size = 8,
+    },
+};
+
+static void fsl_mc_host_initfn(Object *obj)
+{
+    FslMcHostState *s = FSL_MC_HOST(obj);
+    DeviceState *ds = DEVICE(obj);
+
+    qbus_create_inplace(&s->bus, sizeof(s->bus), TYPE_FSL_MC_BUS, ds, NULL);
+    QLIST_INIT(&s->bus.device_list);
+}
+
+static void fsl_mc_host_realize(DeviceState *dev, Error **errp)
+{
+    FslMcHostState *s = FSL_MC_HOST(dev);
+    SysBusDevice *d = SYS_BUS_DEVICE(dev);
+
+    if (s == NULL) {
+        fprintf(stderr, "No FSL-MC Host bridge found\n");
+        return;
+    }
+
+    s->qbman_portals_ci_offset = 0x0;
+    s->qbman_portals_ce_offset = s->qbman_portals_ci_offset + 0x4000000;
+
+    memory_region_init_io(&s->mc_portal, OBJECT(s), &fsl_mc_portal_ops, s,
+                          "fsl_mc portal", s->mc_portals_range_size);
+    sysbus_init_mmio(d, &s->mc_portal);
+
+    memory_region_init_io(&s->qbman_portal, OBJECT(s), NULL, s,
+                          "fsl_qbman portal", s->qbman_portals_range_size);
+    sysbus_init_mmio(d, &s->qbman_portal);
+}
+
+static void fsl_mc_host_class_init(ObjectClass *klass, void *data)
+{
+    DeviceClass *dc = DEVICE_CLASS(klass);
+    dc->props = fsl_mc_props;
+    dc->realize = fsl_mc_host_realize;
+}
+
+static const TypeInfo fsl_mc_host_info = {
+    .name          = TYPE_FSL_MC_HOST,
+    .parent        = TYPE_SYS_BUS_DEVICE,
+    .instance_size = sizeof(FslMcHostState),
+    .instance_init = fsl_mc_host_initfn,
+    .class_init    = fsl_mc_host_class_init,
+};
+
+static const TypeInfo fsl_mc_bus_info = {
+    .name = TYPE_FSL_MC_BUS,
+    .parent = TYPE_BUS,
+    .instance_size = sizeof(FslMcBusState),
+};
+
+static void fsl_mc_register_types(void)
+{
+    type_register_static(&fsl_mc_bus_info);
+    type_register_static(&fsl_mc_host_info);
+    type_register_static(&fsl_mc_device_info);
+}
+
+type_init(fsl_mc_register_types)
diff --git a/hw/fsl-mc/fsl-mc.h b/hw/fsl-mc/fsl-mc.h
new file mode 100644
index 0000000..ff398f9
--- /dev/null
+++ b/hw/fsl-mc/fsl-mc.h
@@ -0,0 +1,101 @@
+/*
+ * FSL Management Complex driver
+ *
+ * Copyright (C) 2015 Freescale Semiconductor, Inc. All rights reserved.
+ *
+ * Author: Bharat Bhushan <bharat.bhushan@freescale.com>
+ *
+ * This is free software; you can redistribute it and/or modify
+ * it under the terms of  the GNU General  Public License as published by
+ * the Free Software Foundation;  either version 2 of the  License, or
+ * (at your option) any later version.
+ *
+ */
+
+#if !defined(FSL_MC_FSL_MC_H)
+#define FSL_MC_FSL_MC_H
+
+#include "hw/hw.h"
+#include "sysemu/sysemu.h"
+#include "hw/sysbus.h"
+
+/* Range within all MC portals fit in */
+#define FSLMC_MC_PORTALS_RANGE_SIZE 0x4000000
+/* Size of each MC Portal */
+#define FSLMC_MC_PORTAL_SIZE 0x10000
+/* Range within all QBMAN portals fit in */
+#define FSLMC_QBMAN_PORTALS_RANGE_SIZE 0x8000000
+/* Size of each QBMAN Portal */
+#define FSLMC_QBMAN_PORTAL_SIZE 0x10000
+
+struct FslMcBusState;
+
+#define TYPE_FSL_MC_BUS "fsl-mc-bus"
+#define FSL_MC_BUS(obj) OBJECT_CHECK(FslMcBusState, (obj), TYPE_FSL_MC_BUS)
+
+struct FslMcBusState {
+    BusState qbus;
+
+    QLIST_HEAD(, FslMcDeviceState) device_list;
+};
+typedef struct FslMcBusState FslMcBusState;
+
+#define TYPE_FSL_MC_HOST "fsl-mc-host"
+#define FSL_MC_HOST(obj) OBJECT_CHECK(FslMcHostState, (obj), TYPE_FSL_MC_HOST)
+
+typedef struct FslMcHostState {
+    /*< private >*/
+    SysBusDevice parent_obj;
+    /*< public >*/
+    FslMcBusState bus;
+    MemoryRegion mc_portal;
+    MemoryRegion qbman_portal;
+    uint64_t mc_bus_base_addr;
+    uint64_t mc_portals_range_offset;
+    uint64_t mc_portals_range_size;
+    uint64_t qbman_portals_range_offset;
+    uint64_t qbman_portals_range_size;
+    uint64_t qbman_portals_ce_offset;
+    uint64_t qbman_portals_ci_offset;
+} FslMcHostState;
+
+typedef struct FslMcHostClass {
+    DeviceClass parent_class;
+} FslMcHostClass;
+
+#define TYPE_FSL_MC_DEVICE "fsl-mc-device"
+#define FSL_MC_DEVICE(obj) OBJECT_CHECK(FslMcDeviceState, (obj), TYPE_FSL_MC_DEVICE)
+#define FSL_MC_DEVICE_CLASS(klass) \
+         OBJECT_CLASS_CHECK(FslMcDeviceClass, (klass), TYPE_FSL_MC_DEVICE)
+#define FSL_MC_DEVICE_GET_CLASS(obj) \
+        OBJECT_GET_CLASS(FslMcDeviceClass, (obj), TYPE_FSL_MC_DEVICE)
+
+
+typedef struct FslMcDeviceState {
+    /*< private >*/
+    DeviceState parent_obj;
+    /*< public >*/
+    DeviceState qdev;
+    FslMcBusState *bus;
+    bool root_dprc;
+    uint16_t dprc_id;
+    QLIST_ENTRY(FslMcDeviceState) next;
+} FslMcDeviceState;
+
+typedef struct FslMcDeviceClass {
+    DeviceClass parent_class;
+
+    void (*realize)(FslMcDeviceState *dev, Error **errp);
+    int (*init)(FslMcDeviceState *mcdev);
+    int (*exit)(FslMcDeviceState *mcdev);
+    uint16_t vendor_id;
+    uint16_t device_id;
+} FslMcDeviceClass;
+
+int fsl_mc_register_device(FslMcDeviceState *mcdev, int region_num,
+                           MemoryRegion *mem, MemoryRegion *mmap_mem,
+                           char *name, uint16_t id);
+int fsl_mc_get_portals_ranges(hwaddr *mc_p_addr, hwaddr *mc_p_size,
+                              hwaddr *qbman_p_addr, hwaddr *qbman_p_size);
+int fsl_mc_get_root_mcp_addr_range(hwaddr *mc_p_addr, hwaddr *mc_p_size);
+#endif /* !defined(FSL_MC_FSL_MC_H) */
diff --git a/hw/vfio/Makefile.objs b/hw/vfio/Makefile.objs
index d540c9d..0de253e 100644
--- a/hw/vfio/Makefile.objs
+++ b/hw/vfio/Makefile.objs
@@ -2,5 +2,6 @@ ifeq ($(CONFIG_LINUX), y)
 obj-$(CONFIG_SOFTMMU) += common.o
 obj-$(CONFIG_PCI) += pci.o
 obj-$(CONFIG_SOFTMMU) += platform.o
+obj-$(CONFIG_SOFTMMU) += fsl_mc.o
 obj-$(CONFIG_SOFTMMU) += calxeda-xgmac.o
 endif
diff --git a/hw/vfio/fsl_mc.c b/hw/vfio/fsl_mc.c
new file mode 100644
index 0000000..19c580a
--- /dev/null
+++ b/hw/vfio/fsl_mc.c
@@ -0,0 +1,307 @@
+/*
+ * vfio based device assignment support -Freescale Management Complex devices
+ *
+ * Copyright (C) 2015 Freescale Semiconductor, Inc. All rights reserved.
+ *
+ * Author: Bharat Bhushan, <Bharat.Bhushan@freescale.com>
+ *
+ * This work is licensed under the terms of the GNU GPL, version 2.  See
+ * the COPYING file in the top-level directory.
+ *
+ * Based on vfio based PCI device assignment support:
+ *  Copyright Red Hat, Inc. 2012
+ */
+
+#include <linux/vfio.h>
+#include <sys/ioctl.h>
+
+#include "hw/fsl-mc/fsl-mc.h"
+#include "hw/vfio/vfio-fsl-mc.h"
+#include "qemu/error-report.h"
+#include "qemu/range.h"
+#include "sysemu/sysemu.h"
+#include "exec/memory.h"
+#include "qemu/queue.h"
+#include "hw/sysbus.h"
+#include "sysemu/kvm.h"
+
+/* VFIO skeleton */
+
+/* not implemented yet */
+static void vfio_fsl_mc_compute_needs_reset(VFIODevice *vbasedev)
+{
+    vbasedev->needs_reset = false;
+}
+
+/* not implemented yet */
+static int vfio_fsl_mc_hot_reset_multi(VFIODevice *vbasedev)
+{
+    return 0;
+}
+
+/**
+ * vfio_populate_device - Allocate and populate MMIO region
+ * and IRQ structs according to driver returned information
+ * @vbasedev: the VFIO device handle
+ *
+ */
+static int vfio_populate_device(VFIODevice *vbasedev)
+{
+    int i, ret = -1;
+    VFIOFslmcDevice *vdev =
+        container_of(vbasedev, VFIOFslmcDevice, vbasedev);
+
+    if (!(vbasedev->flags & VFIO_DEVICE_FLAGS_PLATFORM)) {
+        error_report("vfio: Um, this isn't a fsl_mc device");
+        return ret;
+    }
+
+    vdev->regions = g_malloc0_n(1,
+                                sizeof(VFIORegion *) * vbasedev->num_regions);
+
+    for (i = 0; i < vbasedev->num_regions; i++) {
+        struct vfio_region_info reg_info = { .argsz = sizeof(reg_info) };
+        VFIORegion *ptr;
+
+        vdev->regions[i] = g_malloc0_n(1, sizeof(VFIORegion));
+        ptr = vdev->regions[i];
+        reg_info.index = i;
+        ret = ioctl(vbasedev->fd, VFIO_DEVICE_GET_REGION_INFO, &reg_info);
+        if (ret) {
+            error_report("vfio: Error getting region %d info: %m", i);
+            goto reg_error;
+        }
+        ptr->flags = reg_info.flags;
+        ptr->size = reg_info.size;
+        ptr->fd_offset = reg_info.offset;
+        ptr->nr = i;
+        ptr->vbasedev = vbasedev;
+    }
+
+    return 0;
+reg_error:
+    for (i = 0; i < vbasedev->num_regions; i++) {
+        g_free(vdev->regions[i]);
+    }
+    g_free(vdev->regions);
+    return ret;
+}
+
+/* specialized functions for VFIO FSL-MC devices */
+static VFIODeviceOps vfio_fsl_mc_ops = {
+    .vfio_compute_needs_reset = vfio_fsl_mc_compute_needs_reset,
+    .vfio_hot_reset_multi = vfio_fsl_mc_hot_reset_multi,
+};
+
+/**
+ * vfio_base_device_init - perform preliminary VFIO setup
+ * @vbasedev: the VFIO device handle
+ *
+ * Implement the VFIO command sequence that allows to discover
+ * assigned device resources: group extraction, device
+ * fd retrieval, resource query.
+ * Precondition: the device name must be initialized
+ */
+static int vfio_base_device_init(VFIODevice *vbasedev)
+{
+    VFIOGroup *group;
+    VFIODevice *vbasedev_iter;
+    char path[PATH_MAX], iommu_group_path[PATH_MAX], *group_name;
+    ssize_t len;
+    struct stat st;
+    int groupid;
+    int ret;
+
+    /* name must be set prior to the call */
+    if (!vbasedev->name) {
+        return -EINVAL;
+    }
+
+    /* Check that the host device exists */
+    g_snprintf(path, sizeof(path), "/sys/bus/fsl-mc/devices/%s/",
+               vbasedev->name);
+
+    if (stat(path, &st) < 0) {
+        error_report("vfio: error: no such host device: %s", path);
+        return -errno;
+    }
+
+    g_strlcat(path, "iommu_group", sizeof(path));
+    len = readlink(path, iommu_group_path, sizeof(iommu_group_path));
+    if (len < 0) {
+        error_report("vfio: error no iommu_group for device");
+        return -errno;
+    }
+
+    iommu_group_path[len] = 0;
+    group_name = basename(iommu_group_path);
+
+    if (sscanf(group_name, "%d", &groupid) != 1) {
+        error_report("vfio: error reading %s: %m", path);
+        return -errno;
+    }
+
+    group = vfio_get_group(groupid, &address_space_memory);
+    if (!group) {
+        error_report("vfio: failed to get group %d", groupid);
+        return -ENOENT;
+    }
+
+    g_snprintf(path, sizeof(path), "%s", vbasedev->name);
+
+    QLIST_FOREACH(vbasedev_iter, &group->device_list, next) {
+        if (strcmp(vbasedev_iter->name, vbasedev->name) == 0) {
+            error_report("vfio: error: device %s is already attached", path);
+            vfio_put_group(group);
+            return -EBUSY;
+        }
+    }
+    ret = vfio_get_device(group, path, vbasedev);
+    if (ret) {
+        error_report("vfio: failed to get device %s", path);
+        vfio_put_group(group);
+        return ret;
+    }
+
+    ret = vfio_populate_device(vbasedev);
+    if (ret) {
+        error_report("vfio: failed to populate device %s", path);
+        vfio_put_group(group);
+    }
+
+    return ret;
+}
+
+/**
+ * vfio_map_region - initialize the 2 memory regions for a given
+ * MMIO region index
+ * @vdev: the VFIO fsl_mc device handle
+ * @nr: the index of the region
+ *
+ * Init the top memory region and the mmapped memory region beneath
+ * VFIOFslmcDevice is used since VFIODevice is not a QOM Object
+ * and could not be passed to memory region functions
+*/
+static void vfio_map_region(VFIOFslmcDevice *vdev, int nr)
+{
+    VFIORegion *region = vdev->regions[nr];
+    unsigned size = region->size;
+    char name[64];
+
+    if (!size) {
+        return;
+    }
+
+    g_snprintf(name, sizeof(name), "VFIO %s region %d",
+               vdev->vbasedev.name, nr);
+
+    /* A "slow" read/write mapping underlies all regions */
+    memory_region_init_io(&region->mem, OBJECT(vdev), &vfio_region_ops,
+                          region, name, size);
+
+    g_strlcat(name, " mmap", sizeof(name));
+
+    if (vfio_mmap_region(OBJECT(vdev), region, &region->mem,
+                         &region->mmap_mem, &region->mmap, size, 0, name)) {
+        error_report("%s unsupported. Performance may be slow", name);
+    }
+}
+
+static void vfio_fsl_mc_reset(DeviceState *dev)
+{
+    VFIOFslmcDevice *vdev = VFIO_FSL_MC_DEVICE(dev);
+    VFIODevice *vbasedev = &vdev->vbasedev;
+    int ret;
+
+    if (vbasedev->reset_works) {
+        ret = ioctl(vbasedev->fd, VFIO_DEVICE_RESET);
+        if (ret) {
+            printf("fails to reset device err(%d)\n", ret);
+        }
+     }
+}
+
+static int vfio_fsl_mc_initfn(FslMcDeviceState *mcdev)
+{
+    VFIOFslmcDevice *vdev = DO_UPCAST(VFIOFslmcDevice, mcdev, mcdev);
+    VFIODevice *vbasedev = &vdev->vbasedev;
+    int i, ret;
+    char *temp;
+
+    vbasedev->type = VFIO_DEVICE_TYPE_FSL_MC;
+    vbasedev->ops = &vfio_fsl_mc_ops;
+
+    ret = vfio_base_device_init(vbasedev);
+    if (ret) {
+        return ret;
+    }
+
+    strncpy(vdev->name, vbasedev->name, 10);
+    temp = strchr(vdev->name, '.');
+    *temp = '\0';
+    temp++;
+    vdev->id = atoi(temp);
+
+    for (i = 0; i < vbasedev->num_regions; i++) {
+        vfio_map_region(vdev, i);
+        ret = fsl_mc_register_device(mcdev, i, &vdev->regions[i]->mem,
+                               &vdev->regions[i]->mmap_mem,
+                               vdev->name, vdev->id);
+        if (ret) {
+            return ret;
+        }
+    }
+
+    return 0;
+}
+
+static void vfio_fsl_mc_instance_init(Object *obj)
+{
+    FslMcDeviceState *mcdev = FSL_MC_DEVICE(obj);
+    VFIOFslmcDevice *vdev = DO_UPCAST(VFIOFslmcDevice, mcdev, mcdev);
+
+    device_add_bootindex_property(obj, &vdev->bootindex,
+                                  "bootindex", NULL,
+                                  &mcdev->qdev, NULL);
+}
+
+static const VMStateDescription vfio_fsl_mc_vmstate = {
+    .name = TYPE_VFIO_FSL_MC,
+    .unmigratable = 1,
+};
+
+static Property vfio_fsl_mc_dev_properties[] = {
+    DEFINE_PROP_STRING("host", VFIOFslmcDevice, vbasedev.name),
+    DEFINE_PROP_BOOL("x-mmap", VFIOFslmcDevice, vbasedev.allow_mmap, true),
+    DEFINE_PROP_END_OF_LIST(),
+};
+
+static void vfio_fsl_mc_class_init(ObjectClass *klass, void *data)
+{
+    DeviceClass *dc = DEVICE_CLASS(klass);
+    FslMcDeviceClass *mcdc = FSL_MC_DEVICE_CLASS(klass);
+
+    //dc->reset = vfio_fsl_mc_reset;
+    dc->props = vfio_fsl_mc_dev_properties;
+    dc->vmsd = &vfio_fsl_mc_vmstate;
+    dc->desc = "VFIO-based fsl_mc device assignment";
+    set_bit(DEVICE_CATEGORY_MISC, dc->categories);
+//    mcdc->exit = vfio_fsl_mc_exitfn;
+    mcdc->init = vfio_fsl_mc_initfn;
+}
+
+static const TypeInfo vfio_fsl_mc_dev_info = {
+    .name = TYPE_VFIO_FSL_MC,
+    .parent = TYPE_FSL_MC_DEVICE,
+    .instance_size = sizeof(VFIOFslmcDevice),
+    .class_init = vfio_fsl_mc_class_init,
+    .instance_init = vfio_fsl_mc_instance_init,
+//    .class_size = sizeof(VFIOFslmcDeviceClass),
+};
+
+static void register_vfio_fsl_mc_dev_type(void)
+{
+    type_register_static(&vfio_fsl_mc_dev_info);
+}
+
+type_init(register_vfio_fsl_mc_dev_type)
diff --git a/include/hw/arm/fslmc-fdt.h b/include/hw/arm/fslmc-fdt.h
new file mode 100644
index 0000000..4be5363
--- /dev/null
+++ b/include/hw/arm/fslmc-fdt.h
@@ -0,0 +1,57 @@
+/*
+ * Dynamic FSL mc-bus device tree node generation API
+ *
+ * Copyright (C) 2015 Freescale Semiconductor, Inc. All rights reserved.
+ *
+ * Authors:
+ *  Bharat Bhushan <bharat.bhushan@freescale.com>
+ *
+ * This program is free software; you can redistribute it and/or modify it
+ * under the terms and conditions of the GNU General Public License,
+ * version 2 or later, as published by the Free Software Foundation.
+ *
+ * This program is distributed in the hope it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
+ * more details.
+ *
+ * You should have received a copy of the GNU General Public License along with
+ * this program.  If not, see <http://www.gnu.org/licenses/>.
+ *
+ */
+
+#ifndef HW_FSL_MC_FDT_H
+#define HW_FSL_MC_FDT_H
+
+#include "hw/arm/arm.h"
+#include "qemu-common.h"
+#include "hw/sysbus.h"
+
+/*
+ * struct that contains dimensioning parameters of the platform bus
+ */
+typedef struct {
+    hwaddr fslmc_bus_base; /* start address of the bus */
+    hwaddr fslmc_bus_size; /* size of the bus */
+} FSLMCBusSystemParams;
+
+/*
+ * struct that contains all relevant info to build the fdt nodes of
+ * platform bus and attached dynamic sysbus devices
+ * in the future might be augmented with additional info
+ * such as PHY, CLK handles ...
+ */
+typedef struct {
+    const FSLMCBusSystemParams *system_params;
+    struct arm_boot_info *binfo;
+    const char *intc; /* parent interrupt controller name */
+} FSLMCBusFDTParams;
+
+/**
+ * arm_register_platform_bus_fdt_creator - register a machine init done
+ * notifier that creates the device tree nodes of the platform bus and
+ * associated dynamic sysbus devices
+ */
+void fsl_register_mc_bus_fdt_creator(FSLMCBusFDTParams *fdt_params);
+
+#endif
diff --git a/include/hw/arm/virt.h b/include/hw/arm/virt.h
index d22fd8e..049b864 100644
--- a/include/hw/arm/virt.h
+++ b/include/hw/arm/virt.h
@@ -56,6 +56,7 @@ enum {
     VIRT_PCIE_ECAM,
     VIRT_GIC_V2M,
     VIRT_PLATFORM_BUS,
+    VIRT_FSL_MC_BUS,
 };
 
 typedef struct MemMapEntry {
diff --git a/include/hw/vfio/vfio-common.h b/include/hw/vfio/vfio-common.h
index 59a321d..11cfdde 100644
--- a/include/hw/vfio/vfio-common.h
+++ b/include/hw/vfio/vfio-common.h
@@ -43,6 +43,7 @@
 enum {
     VFIO_DEVICE_TYPE_PCI = 0,
     VFIO_DEVICE_TYPE_PLATFORM = 1,
+    VFIO_DEVICE_TYPE_FSL_MC = 2,
 };
 
 typedef struct VFIORegion {
diff --git a/include/hw/vfio/vfio-fsl-mc.h b/include/hw/vfio/vfio-fsl-mc.h
new file mode 100644
index 0000000..b69e3a5
--- /dev/null
+++ b/include/hw/vfio/vfio-fsl-mc.h
@@ -0,0 +1,45 @@
+/*
+ * vfio based device assignment support -Freescale Management Complex devices
+ *
+ * Copyright (C) 2015 Freescale Semiconductor, Inc. All rights reserved.
+ *
+ * Author: Bharat Bhushan,     <Bharat.Bhushan@freescale.com>
+ *
+ * This work is licensed under the terms of the GNU GPL, version 2.  See
+ * the COPYING file in the top-level directory.
+ *
+ * Based on vfio based PCI device assignment support:
+ *  Copyright Red Hat, Inc. 2012
+ */
+
+#ifndef HW_VFIO_VFIO_FSL_MC_H
+#define HW_VFIO_VFIO_FSL_MC_H
+
+#include "hw/sysbus.h"
+#include "hw/vfio/vfio-common.h"
+
+#define TYPE_VFIO_FSL_MC "vfio-fsl-mc"
+
+typedef struct VFIOFslmcDevice {
+    FslMcDeviceState mcdev;
+    VFIODevice vbasedev; /* not a QOM object */
+    VFIORegion **regions;
+    char name[10];
+    uint16_t id;
+    int32_t bootindex;
+} VFIOFslmcDevice;
+
+typedef struct VFIOFslmcDeviceClass {
+    /*< private >*/
+    SysBusDeviceClass parent_class;
+    /*< public >*/
+} VFIOFslmcDeviceClass;
+
+#define VFIO_FSL_MC_DEVICE(obj) \
+     OBJECT_CHECK(VFIOFslmcDevice, (obj), TYPE_VFIO_FSL_MC)
+#define VFIO_FSL_MC_DEVICE_CLASS(klass) \
+     OBJECT_CLASS_CHECK(VFIOFslmcDeviceClass, (klass), TYPE_VFIO_FSL_MC)
+#define VFIO_FSL_MC_DEVICE_GET_CLASS(obj) \
+     OBJECT_GET_CLASS(VFIOFslmcDeviceClass, (obj), TYPE_VFIO_FSL_MC)
+
+#endif /*HW_VFIO_VFIO_FSL_MC_H*/
-- 
1.8.3.2

