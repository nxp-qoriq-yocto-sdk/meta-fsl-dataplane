From 2fe84e30d6f6d8f12416dc8f5d139da9a49788f6 Mon Sep 17 00:00:00 2001
From: Bharat Bhushan <Bharat.Bhushan@freescale.com>
Date: Thu, 7 Jan 2016 17:45:31 +0530
Subject: [PATCH 03/15] Revert "dpio: polling if IRQ not available"

This reverts commit 1b6300180d56ec0c131a8c5b3f0dff6a1e5ca52c.
This reverts commit d988efd15eb8f30e20aa057c6e6c2da2d77bfadf.

Signed-off-by: Bharat Bhushan <Bharat.Bhushan@freescale.com>

Conflicts:
	drivers/staging/fsl-mc/bus/dpio/dpio-drv.c
---
 drivers/staging/fsl-mc/bus/dpio/dpio-drv.c | 67 ++++--------------------------
 1 file changed, 8 insertions(+), 59 deletions(-)

diff --git a/drivers/staging/fsl-mc/bus/dpio/dpio-drv.c b/drivers/staging/fsl-mc/bus/dpio/dpio-drv.c
index 5389ee8..e50af965 100644
--- a/drivers/staging/fsl-mc/bus/dpio/dpio-drv.c
+++ b/drivers/staging/fsl-mc/bus/dpio/dpio-drv.c
@@ -58,25 +58,8 @@ MODULE_DESCRIPTION(DPIO_DESCRIPTION);
 struct dpio_priv {
 	struct dpaa2_io *io;
 	char irq_name[MAX_DPIO_IRQ_NAME];
-	struct task_struct *thread;
 };
 
-static int dpio_thread(void *data)
-{
-	struct dpaa2_io *io = data;
-
-	while (!kthread_should_stop()) {
-		int err = dpaa2_io_poll(io);
-
-		if (err) {
-			pr_err("dpaa2_io_poll() failed\n");
-			return err;
-		}
-		msleep(50);
-	}
-	return 0;
-}
-
 static irqreturn_t dpio_irq_handler(int irq_num, void *arg)
 {
 	struct device *dev = (struct device *)arg;
@@ -158,7 +141,6 @@ dpaa2_dpio_probe(struct fsl_mc_device *ls_dev)
 	int err = -ENOMEM;
 	struct device *dev = &ls_dev->dev;
 	struct dpaa2_io *defservice;
-	bool irq_allocated = false;
 	static int next_cpu;
 
 	priv = devm_kzalloc(dev, sizeof(*priv), GFP_KERNEL);
@@ -216,52 +198,24 @@ dpaa2_dpio_probe(struct fsl_mc_device *ls_dev)
 		resource_size(&ls_dev->regions[0]));
 	desc.regs_cinh = ioremap(ls_dev->regions[1].start,
 		resource_size(&ls_dev->regions[1]));
-	priv->io = dpaa_io_create(&desc);
+	priv->io = dpaa2_io_create(&desc);
 	if (!priv->io) {
 		dev_err(dev, "DPIO setup failed\n");
-		goto err_dpaa_io_create;
+		goto err_dpaa2_io_create;
 	}
 
 	err = fsl_mc_allocate_irqs(ls_dev);
 	if (err) {
 		dev_err(dev, "DPIO fsl_mc_allocate_irqs failed\n");
-		goto poll_mode;
+		goto err_allocate_irqs;
 	}
-	irq_allocated = true;
 
 	snprintf(priv->irq_name, MAX_DPIO_IRQ_NAME, "FSL DPIO %d",
 			desc.dpio_id);
 
 	err = register_dpio_irq_handlers(ls_dev, desc.cpu);
-poll_mode:
-	if (err) {
-		dev_info(dev, "Using polling mode for DPIO %d\n",
-			 desc.dpio_id);
-		/* goto err_register_dpio_irq; */
-		/* TEMP: Start polling if IRQ could not
-		   be registered.  This will go away once
-		   KVM support for MSI is present */
-		if (irq_allocated == true)
-			fsl_mc_free_irqs(ls_dev);
-
-		if (desc.stash_affinity)
-			priv->thread = kthread_create_on_cpu(dpio_thread,
-							     priv->io,
-							     desc.cpu,
-							     "dpio_aff%u");
-		else
-			priv->thread =
-				kthread_create(dpio_thread,
-					       priv->io,
-					       "dpio_non%u",
-					       dpio_attrs.qbman_portal_id);
-		if (IS_ERR(priv->thread)) {
-			dev_err(dev, "DPIO thread failure\n");
-			err = PTR_ERR(priv->thread);
-			goto err_dpaa_thread;
-		}
-		wake_up_process(priv->thread);
-	}
+	if (err)
+		goto err_register_dpio_irq;
 
 	defservice = dpaa2_io_default_service();
 	err = dpaa2_io_service_add(defservice, priv->io);
@@ -281,11 +235,9 @@ poll_mode:
 
 err_dpaa2_io_add:
 	unregister_dpio_irq_handlers(ls_dev);
-/* TEMP: To be restored once polling is removed
-  err_register_dpio_irq:
+err_register_dpio_irq:
 	fsl_mc_free_irqs(ls_dev);
-*/
-err_dpaa_thread:
+err_allocate_irqs:
 err_dpaa2_io_create:
 	dpio_disable(ls_dev->mc_io, 0, ls_dev->mc_handle);
 err_get_attr:
@@ -324,10 +276,7 @@ dpaa2_dpio_remove(struct fsl_mc_device *ls_dev)
 	 */
 	dev_crit(dev, "DPIO unplugging is broken, the service holds onto it\n");
 
-	if (priv->thread)
-		kthread_stop(priv->thread);
-	else
-		dpio_teardown_irqs(ls_dev);
+	dpio_teardown_irqs(ls_dev);
 
 	err = fsl_mc_portal_allocate(ls_dev, 0, &ls_dev->mc_io);
 	if (err) {
-- 
1.8.3.2

